(1)语言特性 过程式，对象式程序设计
	（1）面向过程的程序设计：--典型的c语言程序设计，从上到下，逐步求精，按照顺序一步一步
	把问题解决。c++同样对过程式程序设计支持。
	（2）基于对象的程序设计 && 面向对象程序设计
		什么叫对象？
		-->过程式的程序设计只能处理流程，不能对意外或者调用式的程序作出较好处理
		c++把c语言的结构叫做类class
		如c语言中
		struct Student
		{
			int age;
			char name[32];
			float score;
		};

		在c++中设计为类，由类定义的叫对象，类似于c语言中的结构变量。
		class Student
		{
			private:
				int age;
				char name[32];
				float score;
		}
		类中不仅仅可以定义成员变量（属性），还可以定于属于该类的函数（方法），实现我们的
		功能。
		如：
		struct DaGongZai//打工仔
		{
			//这里是一些方法，表示打工仔的方法
			void eat();
			void sleep();
			void work();
			//除此之外，可能还需要提供对外的接口，如别人来借钱，打工仔需要应付一下
			void MessageHandle(int EventType)；//根据事件类型来处理相应的事情。
		}

		struct DaGongZai zhangsan;
		//通过.引用来调用
		zhangsan.eat();
		zhangsan.sleep();
		
		把所有对象的属性和方法封装成一个类，通过类来定义对象来实例化，调用类的接口供对象
		使用。

		总结：把功能包含在类中，需要的时候通过定义一个对象（zhangsan）的方式来调用的
		方式，叫做基于对象的程序设计。基于对象的程序设计没有继承的概念，对象之间没有层次，也就没有多态。
		
		面向对象的程序设计
			打工仔这个类被别的类继承的时候，如推销员继承自打工仔类
			推销员类即具有打工仔类的方法，而且具有新的方法和成员属性。
			就可以在继承的工程中实现多态性。
			
			c++多态实现的3个条件
				（1）要有继承
				（2）要有虚函数重写
				（3）要有父类指针指向子类对象。

		面向对象程序设计优点
			（1）容易维护，设计好类，通过继承提现现实中的事物
			（2）容易拓展，只需要添加函数
			（3）模块化，通过设置各种访问级别来限制别人对我的访问，也维护了数据的安全 public protected private

总结：（1）类和结构体都是用来模拟现实中的对象。如模拟出一个学生，那么他的属性有：年龄，班级，身高，体重。
		但是现实中的对象不仅仅有静态的属性，而且有动态的属性，如学生会跑，要学习，要吃饭。要想模拟吃这些
		动作，就需要使用类来模拟出显示中的对象。



(2)编写一个最简单的c++程序
	新建一个解决方案，--项目